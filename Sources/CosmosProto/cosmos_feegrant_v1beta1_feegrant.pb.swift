// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cosmos/feegrant/v1beta1/feegrant.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// BasicFeeAllowance implements FeeAllowance with a one-time grant of tokens
/// that optionally expires. The delegatee can use up to SpendLimit to cover fees.
public struct Cosmos_Feegrant_V1beta1_BasicFeeAllowance {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// spend_limit specifies the maximum amount of tokens that can be spent
  /// by this allowance and will be updated as tokens are spent. If it is
  /// empty, there is no spend limit and any amount of coins can be spent.
  public var spendLimit: [Cosmos_Base_V1beta1_Coin] = []

  /// expiration specifies an optional time when this allowance expires
  public var expiration: Cosmos_Feegrant_V1beta1_ExpiresAt {
    get {return _expiration ?? Cosmos_Feegrant_V1beta1_ExpiresAt()}
    set {_expiration = newValue}
  }
  /// Returns true if `expiration` has been explicitly set.
  public var hasExpiration: Bool {return self._expiration != nil}
  /// Clears the value of `expiration`. Subsequent reads from it will return its default value.
  public mutating func clearExpiration() {self._expiration = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _expiration: Cosmos_Feegrant_V1beta1_ExpiresAt? = nil
}

/// PeriodicFeeAllowance extends FeeAllowance to allow for both a maximum cap,
/// as well as a limit per time period.
public struct Cosmos_Feegrant_V1beta1_PeriodicFeeAllowance {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// basic specifies a struct of `BasicFeeAllowance`
  public var basic: Cosmos_Feegrant_V1beta1_BasicFeeAllowance {
    get {return _basic ?? Cosmos_Feegrant_V1beta1_BasicFeeAllowance()}
    set {_basic = newValue}
  }
  /// Returns true if `basic` has been explicitly set.
  public var hasBasic: Bool {return self._basic != nil}
  /// Clears the value of `basic`. Subsequent reads from it will return its default value.
  public mutating func clearBasic() {self._basic = nil}

  /// period specifies the time duration in which period_spend_limit coins can
  /// be spent before that allowance is reset
  public var period: Cosmos_Feegrant_V1beta1_Duration {
    get {return _period ?? Cosmos_Feegrant_V1beta1_Duration()}
    set {_period = newValue}
  }
  /// Returns true if `period` has been explicitly set.
  public var hasPeriod: Bool {return self._period != nil}
  /// Clears the value of `period`. Subsequent reads from it will return its default value.
  public mutating func clearPeriod() {self._period = nil}

  /// period_spend_limit specifies the maximum number of coins that can be spent
  /// in the period
  public var periodSpendLimit: [Cosmos_Base_V1beta1_Coin] = []

  /// period_can_spend is the number of coins left to be spent before the period_reset time
  public var periodCanSpend: [Cosmos_Base_V1beta1_Coin] = []

  /// period_reset is the time at which this period resets and a new one begins,
  /// it is calculated from the start time of the first transaction after the
  /// last period ended
  public var periodReset: Cosmos_Feegrant_V1beta1_ExpiresAt {
    get {return _periodReset ?? Cosmos_Feegrant_V1beta1_ExpiresAt()}
    set {_periodReset = newValue}
  }
  /// Returns true if `periodReset` has been explicitly set.
  public var hasPeriodReset: Bool {return self._periodReset != nil}
  /// Clears the value of `periodReset`. Subsequent reads from it will return its default value.
  public mutating func clearPeriodReset() {self._periodReset = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _basic: Cosmos_Feegrant_V1beta1_BasicFeeAllowance? = nil
  fileprivate var _period: Cosmos_Feegrant_V1beta1_Duration? = nil
  fileprivate var _periodReset: Cosmos_Feegrant_V1beta1_ExpiresAt? = nil
}

/// Duration is a span of a clock time or number of blocks.
/// This is designed to be added to an ExpiresAt struct.
public struct Cosmos_Feegrant_V1beta1_Duration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// sum is the oneof that represents either duration or block
  public var sum: Cosmos_Feegrant_V1beta1_Duration.OneOf_Sum? = nil

  public var duration: SwiftProtobuf.Google_Protobuf_Duration {
    get {
      if case .duration(let v)? = sum {return v}
      return SwiftProtobuf.Google_Protobuf_Duration()
    }
    set {sum = .duration(newValue)}
  }

  public var blocks: UInt64 {
    get {
      if case .blocks(let v)? = sum {return v}
      return 0
    }
    set {sum = .blocks(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// sum is the oneof that represents either duration or block
  public enum OneOf_Sum: Equatable {
    case duration(SwiftProtobuf.Google_Protobuf_Duration)
    case blocks(UInt64)

  #if !swift(>=4.1)
    public static func ==(lhs: Cosmos_Feegrant_V1beta1_Duration.OneOf_Sum, rhs: Cosmos_Feegrant_V1beta1_Duration.OneOf_Sum) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.duration, .duration): return {
        guard case .duration(let l) = lhs, case .duration(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.blocks, .blocks): return {
        guard case .blocks(let l) = lhs, case .blocks(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// ExpiresAt is a point in time where something expires.
/// It may be *either* block time or block height
public struct Cosmos_Feegrant_V1beta1_ExpiresAt {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// sum is the oneof that represents either time or height
  public var sum: Cosmos_Feegrant_V1beta1_ExpiresAt.OneOf_Sum? = nil

  public var time: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {
      if case .time(let v)? = sum {return v}
      return SwiftProtobuf.Google_Protobuf_Timestamp()
    }
    set {sum = .time(newValue)}
  }

  public var height: Int64 {
    get {
      if case .height(let v)? = sum {return v}
      return 0
    }
    set {sum = .height(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// sum is the oneof that represents either time or height
  public enum OneOf_Sum: Equatable {
    case time(SwiftProtobuf.Google_Protobuf_Timestamp)
    case height(Int64)

  #if !swift(>=4.1)
    public static func ==(lhs: Cosmos_Feegrant_V1beta1_ExpiresAt.OneOf_Sum, rhs: Cosmos_Feegrant_V1beta1_ExpiresAt.OneOf_Sum) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.time, .time): return {
        guard case .time(let l) = lhs, case .time(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.height, .height): return {
        guard case .height(let l) = lhs, case .height(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// FeeAllowanceGrant is stored in the KVStore to record a grant with full context
public struct Cosmos_Feegrant_V1beta1_FeeAllowanceGrant {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var granter: String = String()

  public var grantee: String = String()

  public var allowance: SwiftProtobuf.Google_Protobuf_Any {
    get {return _allowance ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_allowance = newValue}
  }
  /// Returns true if `allowance` has been explicitly set.
  public var hasAllowance: Bool {return self._allowance != nil}
  /// Clears the value of `allowance`. Subsequent reads from it will return its default value.
  public mutating func clearAllowance() {self._allowance = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _allowance: SwiftProtobuf.Google_Protobuf_Any? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cosmos.feegrant.v1beta1"

extension Cosmos_Feegrant_V1beta1_BasicFeeAllowance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BasicFeeAllowance"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "spend_limit"),
    2: .same(proto: "expiration"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.spendLimit) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._expiration) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.spendLimit.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.spendLimit, fieldNumber: 1)
    }
    if let v = self._expiration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cosmos_Feegrant_V1beta1_BasicFeeAllowance, rhs: Cosmos_Feegrant_V1beta1_BasicFeeAllowance) -> Bool {
    if lhs.spendLimit != rhs.spendLimit {return false}
    if lhs._expiration != rhs._expiration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Feegrant_V1beta1_PeriodicFeeAllowance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PeriodicFeeAllowance"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "basic"),
    2: .same(proto: "period"),
    3: .standard(proto: "period_spend_limit"),
    4: .standard(proto: "period_can_spend"),
    5: .standard(proto: "period_reset"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._basic) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._period) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.periodSpendLimit) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.periodCanSpend) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._periodReset) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._basic {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._period {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.periodSpendLimit.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.periodSpendLimit, fieldNumber: 3)
    }
    if !self.periodCanSpend.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.periodCanSpend, fieldNumber: 4)
    }
    if let v = self._periodReset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cosmos_Feegrant_V1beta1_PeriodicFeeAllowance, rhs: Cosmos_Feegrant_V1beta1_PeriodicFeeAllowance) -> Bool {
    if lhs._basic != rhs._basic {return false}
    if lhs._period != rhs._period {return false}
    if lhs.periodSpendLimit != rhs.periodSpendLimit {return false}
    if lhs.periodCanSpend != rhs.periodCanSpend {return false}
    if lhs._periodReset != rhs._periodReset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Feegrant_V1beta1_Duration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Duration"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "duration"),
    2: .same(proto: "blocks"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: SwiftProtobuf.Google_Protobuf_Duration?
        if let current = self.sum {
          try decoder.handleConflictingOneOf()
          if case .duration(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.sum = .duration(v)}
      }()
      case 2: try {
        if self.sum != nil {try decoder.handleConflictingOneOf()}
        var v: UInt64?
        try decoder.decodeSingularUInt64Field(value: &v)
        if let v = v {self.sum = .blocks(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.sum {
    case .duration?: try {
      guard case .duration(let v)? = self.sum else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .blocks?: try {
      guard case .blocks(let v)? = self.sum else { preconditionFailure() }
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cosmos_Feegrant_V1beta1_Duration, rhs: Cosmos_Feegrant_V1beta1_Duration) -> Bool {
    if lhs.sum != rhs.sum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Feegrant_V1beta1_ExpiresAt: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExpiresAt"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "time"),
    2: .same(proto: "height"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: SwiftProtobuf.Google_Protobuf_Timestamp?
        if let current = self.sum {
          try decoder.handleConflictingOneOf()
          if case .time(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.sum = .time(v)}
      }()
      case 2: try {
        if self.sum != nil {try decoder.handleConflictingOneOf()}
        var v: Int64?
        try decoder.decodeSingularInt64Field(value: &v)
        if let v = v {self.sum = .height(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.sum {
    case .time?: try {
      guard case .time(let v)? = self.sum else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .height?: try {
      guard case .height(let v)? = self.sum else { preconditionFailure() }
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cosmos_Feegrant_V1beta1_ExpiresAt, rhs: Cosmos_Feegrant_V1beta1_ExpiresAt) -> Bool {
    if lhs.sum != rhs.sum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Feegrant_V1beta1_FeeAllowanceGrant: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FeeAllowanceGrant"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "granter"),
    2: .same(proto: "grantee"),
    3: .same(proto: "allowance"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.granter) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.grantee) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._allowance) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.granter.isEmpty {
      try visitor.visitSingularStringField(value: self.granter, fieldNumber: 1)
    }
    if !self.grantee.isEmpty {
      try visitor.visitSingularStringField(value: self.grantee, fieldNumber: 2)
    }
    if let v = self._allowance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cosmos_Feegrant_V1beta1_FeeAllowanceGrant, rhs: Cosmos_Feegrant_V1beta1_FeeAllowanceGrant) -> Bool {
    if lhs.granter != rhs.granter {return false}
    if lhs.grantee != rhs.grantee {return false}
    if lhs._allowance != rhs._allowance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
